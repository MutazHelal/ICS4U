/*
 * Mutaz Helal
 * March 23
 * BookSearch
 * This application preforms both a linear and binary search for the title
 * of a book using its corresponding reference number.
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.InputMap;
import javax.swing.KeyStroke;

public class BookSearch extends javax.swing.JFrame {

    ArrayList<String> books = new ArrayList<>();
    ArrayList<Integer> nums = new ArrayList<>();
    static int comparisonsLinear;
    static int comparisonsBinary;

    /**
     * Creates new form BookSearch
     */
    public BookSearch() {
        initComponents();
        BufferedReader br = null;
        
        //allow user to click enter for search functionality
        getRootPane().setDefaultButton(search);
        InputMap im = search.getInputMap();
        im.put(KeyStroke.getKeyStroke("ENTER"), "pressed");
        im.put(KeyStroke.getKeyStroke("released ENTER"), "released");

        //transfer lines of the text file to the corresponding arrays
        try {
            br = new BufferedReader(new FileReader("BookList.txt"));
            String word, reference;
            while ((reference = br.readLine()) != null) {
                nums.add(Integer.parseInt(reference));
                word = br.readLine();
                books.add(word);
            }
        } catch (IOException e) {
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        referenceIn = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        binaryOut = new javax.swing.JLabel();
        linearOut = new javax.swing.JLabel();
        linearComparisons = new javax.swing.JLabel();
        binaryComparisons = new javax.swing.JLabel();
        bookSearchGFX = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        referenceIn.setBackground(new java.awt.Color(7, 39, 21));
        referenceIn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        referenceIn.setForeground(new java.awt.Color(255, 255, 255));
        referenceIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        referenceIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                referenceInKeyPressed(evt);
            }
        });
        getContentPane().add(referenceIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 73, 30));

        search.setBackground(new java.awt.Color(238, 183, 27));
        search.setForeground(new java.awt.Color(7, 39, 21));
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, -1, 30));

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 390, 20));

        binaryOut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        binaryOut.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(binaryOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, 400, 20));

        linearOut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        linearOut.setForeground(new java.awt.Color(255, 255, 255));
        linearOut.setText("   ");
        getContentPane().add(linearOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 400, 20));

        linearComparisons.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        linearComparisons.setForeground(new java.awt.Color(56, 182, 255));
        getContentPane().add(linearComparisons, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 210, 20));

        binaryComparisons.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        binaryComparisons.setForeground(new java.awt.Color(56, 182, 255));
        getContentPane().add(binaryComparisons, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 200, 20));

        bookSearchGFX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bookSearchGFX.png"))); // NOI18N
        getContentPane().add(bookSearchGFX, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        //initialize variable
        int termNum, indexLinear, indexBinary;

        //validate input
        try {
            termNum = Integer.parseInt(referenceIn.getText());
        } catch (NumberFormatException e) {
            errorLabel.setText("Please enter a valid reference number.");
            referenceIn.setText("");
            referenceIn.requestFocus();
            return;
        }

        if (termNum > 100) {
            errorLabel.setText("There are no books under that reference "
                    + "number.");
            referenceIn.setText("");

        } else {

            //add the arraylist components to an array
            int[] numList = nums.stream().mapToInt(i -> i).toArray();

            //find the index of the searched reference number
            indexLinear = linearSearch(numList, termNum);
            indexBinary = binarySearch(numList, 0, numList.length, termNum);

            //check the returned index to see if there is a match
            if (indexLinear < 0 && indexBinary < 0) {
                errorLabel.setText("There are no books under that reference "
                        + "number.");
                referenceIn.setText("");

            } else {

                //output the corresponding book title and search information
                binaryOut.setText(books.get(indexBinary));
                linearOut.setText(books.get(indexLinear));

                linearComparisons.setText(String.valueOf(comparisonsLinear)
                        + " comparison(s)");
                binaryComparisons.setText(String.valueOf(comparisonsBinary)
                        + " comparison(s)");

                comparisonsLinear = 0;
                comparisonsBinary = 0;

            }
        }
        referenceIn.requestFocus();
    }//GEN-LAST:event_searchActionPerformed

    private void referenceInKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_referenceInKeyPressed
        //clear outputs
        binaryOut.setText("");
        linearOut.setText("");
        errorLabel.setText("");
        linearComparisons.setText("");
        binaryComparisons.setText("");
    }//GEN-LAST:event_referenceInKeyPressed
    public static int linearSearch(int[] A, int Z) {
        //linear search(sorted)
        for (int k = 0; k < A.length; k++) {
            comparisonsLinear++;
            int compare = Integer.compare(A[k], Z);

            if (compare == 0) {
                return k;
            }
            if (compare > 0) {
                comparisonsLinear = 0;
                return -1;
            }
        }
        comparisonsLinear = 0;
        return -1;
    }

    /**
     * precondition: The provided list is sorted numerically
     *
     * @param A: sorted integer array
     * @param left: leftmost index in array (0)
     * @param right: rightmost index in array
     * @param Z: item to be looked for in the array
     * @return
     */
    public static int binarySearch(int[] A, int left, int right, int Z) {
        comparisonsBinary++;
        //binary search(sorted)
        int middle;
        if (left > right) {
            comparisonsBinary = 0;
            return -1;
        }

        middle = (left + right) / 2;
        int compare = Integer.compare(Z, A[middle]);

        if (compare == 0) {
            return middle;
        }
        if (compare < 0) {
            return binarySearch(A, left, middle - 1, Z);

        } else {
            return binarySearch(A, middle + 1, right, Z);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BookSearch().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel binaryComparisons;
    private javax.swing.JLabel binaryOut;
    private javax.swing.JLabel bookSearchGFX;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel linearComparisons;
    private javax.swing.JLabel linearOut;
    private javax.swing.JTextField referenceIn;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
}
